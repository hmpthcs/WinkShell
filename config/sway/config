################################################################################
# Sway base configuration file for WinkShell on Pinenote
# Author: Hmpthcs
# https://github.com/hmpthcs/winkshell.git
#
# Place at ~/.config/sway/config
#
# Dependencies:
#   ./bindings.conf
#   ./appearance.conf
#   ./rules.conf
#   ./bar.conf
#
# Credit: Some of this borrowed from 
# https://github.com/0cc4m/pinenote-misc/blob/main/sway/config/sway/config
################################################################################


# ENV VARS 
################################################################################

### For sov to work: ###
# exec_always systemctl --user import-environment DISPLAY WAYLAND_DISPLAY SWAYSOCK

#### 'This command passes environment variables from the window manager to 
#### session dbus' [swaywm wiki]
exec dbus-update-activation-environment --all

# (alternate, old) 
# exec dbus-update-activation-environment --systemd DISPLAY I3SOCK SWAYSOCK WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=sway XDG_SESSION_DESKTOP=sway


# SWAY VARIABLES 
################################################################################

# Mod4=Logo key. Use Mod1 for Alt.
set $mod Mod4
# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l


### TERMINAL ###
set $term alacritty


### MENU ###
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
# old:
# set $menu wofi --show drun -i | xargs swaymsg exec --

set $menu bemenu-run -i -l 12 -c -n -M 0 --fn "Bitter Pro 14" --nb "#ffffff" \
  --nf "#000000" --ab "#cccccc" --af "#000000" --bdr "#000000" --hf "#ffffff" \
  --hb "#000000" -C -B 1 -W 0.5 --fbb "#222222" --fbf "#ffffff" --cw 1 \
  --tb "#000000" --tf "#ffffff" --fb "#222222" --ff "#ffffff" -H 40 -R 3 \
    | xargs swaymsg exec --


### WORKSPACES ###
# Create new WS on NEXT if there isn't one
set $next_or_new swaymsg -r -t get_workspaces | jq -r --arg OUTPUT $(swaymsg -t get_outputs -r | jq -r '.[] | select(.focused == true) | .name') '(. | (max_by(.num) | .num)) as $max | [.[] | select(.output == $OUTPUT)] | (max_by(.num) | .num) as $maxOutput | (.[] | select(.focused == true) | .num) as $current | if $maxOutput > $current then "next_on_output" else $max + 1 end'

# Remain on WS1 if going to PREV while on WS1
set $previous_or_first swaymsg -r -t get_workspaces | jq -r --arg OUTPUT $(swaymsg -t get_outputs -r | jq -r '.[] | select(.focused == true) | .name') '(. | (max_by(.num) | .num)) as $max | [.[] | select(.output == $OUTPUT)] | (min_by(.num) | .num) as $minOutput | (.[] | select(.focused == true) | .num) as $current | if $minOutput < $current then "prev_on_output" else $current end'


# OUTPUT
################################################################################

## Pinenote display is called DPI-1. resolution 1872x1404@85Hz
## You can get the names of your outputs by running: swaymsg -t get_outputs

output DPI-1 {
  mode 1872x1404@40Hz
  max_render_time off
  subpixel none
  background #cccccc solid_color
  }

### Disable xwayland ###
xwayland disable


# IDLE
################################################################################

# Example configuration:

# exec swayidle -w \
#          timeout 300 'swaylock -f -c 000000' \
#          timeout 600 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
#          before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.
#
#

### Occ4m's swayidle: ###
# exec_always --no-startup-id flock -n .swayidle.lock swayidle timeout 600 "systemctl suspend" \
# before-sleep "~/.local/bin/before_sleep.sh" after-resume "~/.local/bin/after_resume.sh"


# SEAT
################################################################################
#seat seat0 {
#  hide_cursor when-typing enable
#  hide_cursor 100
#  }

# seat <name> idle_wake <sources...>
#Sets the set of input event sources which can wake the seat from its idle state, 
# as a space separated list of source names. Valid names are "keyboard", "pointer",
# "touchpad", "touch", "tablet_pad", "tablet_tool", and "switch". The default
# behavior is to wake from idle on any event.  

  
# INPUT
################################################################################

## This was at one point necessary on the Pinenote, but no longer so. 
## Rotates touchscreen 180deg.
## input "type:tablet_tool" calibration_matrix -1 0 1 0 -1 1

# input 0:0:cyttsp5 map_to_output DPI-1

input * {
  map_to_output DPI-1
#  drag enabled
#  drag_lock enabled
#  tap enabled
  pointer_accel 0
  }


# Drag floating windows by holding down $mod and left mouse button.
# Resize them with right mouse button + $mod.
# Despite the name, also works for non-floating windows.
# Change normal to inverse to use left mouse button for resizing and right
# mouse button for dragging.

tiling_drag enable
tiling_drag_threshold 3
floating_modifier Alt normal


# EXECS
################################################################################

### Desktop Notifications ###
exec mako


#### Gnome-keyring ###
exec gnome-keyring-daemon --start --components=gpg,pkcs11,secrets,ssh 

### Input method editor ###
# exec_always systemctl --user import-environment DISPLAY WAYLAND_DISPLAY SWAYSOCK
# exec enable-ibus-daemon
# exec_always ibus-daemon -drx
exec fcitx5 -d -r --enable all


### Start Winkshell services ###

# This handles: waybars, wvkbd, rot8, lisgd, wcp, sov, swovcp, autotiling.py
exec_always /usr/local/bin/winkshell_init.sh

# (already done in winkshell_init.sh)
#exec_always python3 /usr/local/bin/autotiling.py

# Test script to change borders for focused containers
# exec_always killall /usr/local/bin/winkshell_borderfocus.py ; /usr/local/bin/winkshell_borderfocus.py

# (already done in winkshell_init.sh)
# exec_always waybar -c ~/.config/waybar/waybar_showbtn.config & waybar -c ~/.config/waybar/waybar_center.config & waybar -c ~/.config/waybar/waybar_hidebtn.config &


# Includes
################################################################################
#
# From sway(5) man entry:
#
# include <path>
#  Includes another file from path. path can be either a full path or a path 
#  relative to the parent config, and expands shell syntax (see wordexp(3) for 
#  details). The same include file can only be included once; subsequent attempts 
#  will be ignored.


include bindings.conf
include appearance.conf
include rules.conf
include bar.conf

include /etc/sway/config.d/*
